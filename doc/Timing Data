numberOfSwaps, roundsBeforeSwapInc: scores

without lockins
0, 64: 17340, 
1, 64: 
2, 64: 17331, 17339
3, 64: 17354, 17360
4, 64: 17361, 17352

with lockins
0, 64: 17367, 17375
2, 64: 17383, 17383

with lockins on even rounds, without on odd rounds

0, 64: 17325, 17358
2, 64: 17376, 17383

optimizer with half lockins every round (GENERATIONS = 64), run for 12h: 
0, 16: 17329 (2h), 17331 (5h)
4, 16: 17329 (2h)
8, 16: 17321 (8h)
12,16: 17341 (1h)

optimizer with half lockins (GENERATIONS = 256), every 64 rounds on current best, run for 22h: 
0, 64: 17313 (17h)
4, 64: 17323 (19h)

GTB every N rounds, where N=64 and divides by 2 every 500 rounds, run for 23h:
0, 64: 17313 (3h)
0, 32: 17313 (9h)

GTB N=64 and divides by 2 every 200 rounds, run for 8h: 
 0, 64: 173139 (3h)
16, 16: 173212 (8h)

brute-force GTB:
run for 5h: 17331 (2h)

For below, (Xh of Yh) means it found the best layout after X hours, but ran for a total of Y hours.

testing chanceToUsePrevLayout without GTB, where roundsBeforeChanceInc = 100 
and every however-many rounds, chanceToUsePrevLayout is raised to the 0.8 power:
0.0: 173445 (5h of 9h), 173256 (4h of 13h)
0.2: 173212 (7h of 9h), 173303 (6h of 13h)
0.4: 173258 (2h of 13h)
(2.5 GHz)
0.5: 173256 (5h of 7h), 173215 (8h of 13h), 173342 (3h of 21h)
0.8: 173303 (2h of 7h), 173303 (10h of 13h), 173258 (9h of 21h)
(2.0 GHz)
0.95:173328 (7h of 13h)
0.99:173298 (30m of 13h)

results for above after <1h: 
0.0: 173606, 173660
0.2: 173459, 173340
0.4: 173354
0.5: 173308, 173540, 173573
0.8: 173303, 173443, 173305 (5m)
0.95:173349
0.99:173298

The above uses the default -O setting. The below uses -O3.

Time to find optimal layout for K_NO (14262392), in seconds; 
Using two versions of CJ anneal() algorithm
Note- These results may be significantly influenced by greatToBest(). GTB may currently be better calibrated for one or the other. It seems to slow down when GTB gets to 256 or so.
Greedy     : geometric mean 22.68 over 200 runs
Semi-Greedy: geometric mean 33.37 over 200 runs
Non-Greedy :
            
Best numbers for K_NO: 
    GTB_ROUNDS 4
    RUNS_BEFORE_GTB_ROUNDS_INC 4

For K_STANDARD (varying GTB_ROUNDS, RUNS_BEFORE_GTB_ROUNDS): 
4, 4  : 17371508 (30m of 20h)
4, 16 : 17358853 (2h of 20h)
4, 64 : 17356508 (13h of 20h) only 5 chars different from above
16, 4 : 17372878 (5h of 20h)
16, 16: 17367353 (5h of 20h)
16, 64: 17363958 (15h of 20h)


Running 4 threads, basic settings: 
17356718 (30m of 4h)
17358238 (1h of 11h)
17359633 (15m of 5h)

These all stop getting better stuff after only a short time.



 * TODO: after a certain point, stop running anneal() and only do greatToBest()
